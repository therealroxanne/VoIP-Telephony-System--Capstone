//This code contains a Python ARI application that does the prepaid billing for calls coming into an asterisk server

import MySQLdb
import ari
import logging
import requests
import time
import threading

logging.basicConfig(level=logging.ERROR)

client = ari.connect('http://localhost:8088', 'asterisk', 'daley123321')

deduction_flag = False

def safe_hangup(channel):
    """Safely hang up the specified channel"""
    try:
        channel.hangup()
        print("Hung up {}".format(channel.json.get('name')))
    except requests.HTTPError as e:
        if e.response.status_code != requests.codes.not_found:
            raise e

def safe_bridge_destroy(bridge):
    """Safely destroy the specified bridge"""
    try:
        bridge.destroy()
    except requests.HTTPError as e:
        if e.response.status_code != requests.codes.not_found:
            raise e

def connect_to_database():
    return MySQLdb.connect(host="localhost", user="asterisk", passwd="YouNeedAReallyGoodPasswordHereToo", db="asterisk")
 
def check_user_credit(user_id):
    db = connect_to_database()
    cursor = db.cursor()
    query = "SELECT balance FROM credit_balance WHERE username = %s"
    cursor.execute(query, (user_id,))
    result = cursor.fetchone()
    db.close()
    return result[0] if result else None

def deduct_credit(user_id, amount):
    db = connect_to_database()
    cursor = db.cursor()
    query = "UPDATE credit_balance SET balance = balance - %s WHERE username = %s"
    cursor.execute(query, (amount, user_id))
    db.commit()
    db.close()

def deduct_credit_periodically(channel, outgoing, user_id):
    """Deduct credit periodically until one of the channels is destroyed"""
    global deduction_flag
    while deduction_flag:
        # Deduct a fixed amount ($0.50) every second
        deduct_credit(user_id, 0.50)
        print("Deducted $0.50 from user {}".format(user_id))
        
	credit_balance = check_user_credit(user_id)
        
	if credit_balance is None or credit_balance < 0.5:
            print("Insufficient credit for user {}".format(user_id))
            playback = channel.play(media='sound:incomplete-try-again1')
            playback.on_event('PlaybackFinished', lambda *args: safe_hangup(channel))
            break
	
	if credit_balance == 15:	  
           playback = channel.play(media='sound:thirtysecs-remain1')
           
	time.sleep(1)

def stasis_start_cb(channel_obj, ev):
    """Handler for StasisStart"""
    channel = channel_obj.get('channel')
    channel_name = channel.json.get('name')
    args = ev.get('args')

    if not args:
        print("Error: {} didn't provide any arguments!".format(channel_name))
        return

    if args and args[0] != 'inbound':
        # Only handle inbound channels here
        return

    if len(args) != 2:
        print("Error: {} didn't tell us who to dial".format(channel_name))
        channel.hangup()
        return

    user_id = channel.json.get('caller').get('number')
    destination = args[1]

    # Check user credit
    credit_balance = check_user_credit(user_id)
    if credit_balance is None or credit_balance < 0.5:
        print("Insufficient credit for user {}".format(user_id))
        playback = channel.play(media='sound:topup-try-again1')
        playback.on_event('PlaybackFinished', lambda *args: safe_hangup(channel))
        return

    print("{} entered our application".format(channel_name))
    channel.ring()

    try:
        print("Dialing {}".format(destination))
        outgoing = client.channels.originate(endpoint=destination, app='billing-app', appArgs='dialed')
        
    except requests.HTTPError:        
 	print("Whoops, pretty sure {} isn't available".format(destination))
        playback = channel.play(media='sound:vm-nobodyavail')
        playback.on_event('PlaybackFinished', lambda *args: safe_hangup(channel))
        return       

    global deduction_flag
    deduction_flag = True

    def outgoing_start_cb(channel_obj, ev):
        """StasisStart handler for our dialed channel"""
        print("{} answered; bridging with {}".format(outgoing.json.get('name'), channel.json.get('name')))
        channel.answer()

        bridge = client.bridges.create(type='mixing')
        bridge.addChannel(channel=[channel.id, outgoing.id])

        # Start the credit deduction in a separate thread
        threading.Thread(target=deduct_credit_periodically, args=(channel, outgoing, user_id)).start()

        # Clean up the bridge when done
        channel.on_event('StasisEnd', lambda *args: safe_bridge_destroy(bridge))
        outgoing.on_event('StasisEnd', lambda *args: safe_bridge_destroy(bridge))

        # Stop credit deduction when a channel is destroyed
        def channel_destroyed_cb(channel, ev):
            global deduction_flag
            deduction_flag = False
            print("Channel {} has hung up, stopping credit deduction".format(channel.json.get('name')))

        channel.on_event('ChannelHangupRequest', channel_destroyed_cb)
        outgoing.on_event('ChannelDestroyed', channel_destroyed_cb)

	
    outgoing.on_event('StasisStart', outgoing_start_cb)

    channel.on_event('StasisEnd', lambda *args: safe_hangup(outgoing))
    outgoing.on_event('StasisEnd', lambda *args: safe_hangup(channel))

client.on_channel_event('StasisStart', stasis_start_cb)

client.run(apps='billing-app')
